
build/mosc.elf:     file format elf32-littlearm


Disassembly of section .text:

20000040 <_text_start>:
  (void)api;
}

__attribute__((weak))
void _hook_cycle(const user_osc_param_t * const params, int32_t *yn, const uint32_t frames)
{
20000040:	4770      	bx	lr

20000042 <_hook_mute>:
  (void)params;
}

__attribute__((weak))
void _hook_mute(const user_osc_param_t * const params)
{
20000042:	4770      	bx	lr

20000044 <_hook_value>:
  (void)params;
}

__attribute__((weak))
void _hook_value(uint16_t value)
{
20000044:	4770      	bx	lr
  (void)value;
}

__attribute__((weak))
void _hook_param(uint16_t index, uint16_t value)
{
20000046:	4770      	bx	lr
20000048:	4770      	bx	lr
2000004a:	4770      	bx	lr
  _hook_init(platform, api);
}

__attribute__((weak))
void _hook_init(uint32_t platform, uint32_t api)
{
2000004c:	4770      	bx	lr

2000004e <_entry>:
 * @{
 */

__attribute__((used))
void _entry(uint32_t platform, uint32_t api)
{
2000004e:	4b10      	ldr	r3, [pc, #64]	; (20000090 <_entry+0x42>)
20000050:	4a10      	ldr	r2, [pc, #64]	; (20000094 <_entry+0x46>)
20000052:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
20000056:	4688      	mov	r8, r1
20000058:	4607      	mov	r7, r0
  // Ensure zero-clear BSS segment
  uint8_t * __restrict bss_p = (uint8_t *)&_bss_start;
  const uint8_t * const bss_e = (uint8_t *)&_bss_end;

  for (; bss_p != bss_e;)
    *(bss_p++) = 0;
2000005a:	2100      	movs	r1, #0
{
  // Ensure zero-clear BSS segment
  uint8_t * __restrict bss_p = (uint8_t *)&_bss_start;
  const uint8_t * const bss_e = (uint8_t *)&_bss_end;

  for (; bss_p != bss_e;)
2000005c:	4293      	cmp	r3, r2
2000005e:	d002      	beq.n	20000066 <_entry+0x18>
    *(bss_p++) = 0;
20000060:	f803 1f01 	strb.w	r1, [r3, #1]!
20000064:	e7fa      	b.n	2000005c <_entry+0xe>
20000066:	4b0c      	ldr	r3, [pc, #48]	; (20000098 <_entry+0x4a>)
20000068:	4c0c      	ldr	r4, [pc, #48]	; (2000009c <_entry+0x4e>)
2000006a:	1ae4      	subs	r4, r4, r3
2000006c:	10a4      	asrs	r4, r4, #2

  // Call constructors if any.  
  const size_t count = __init_array_end - __init_array_start;
  for (size_t i = 0; i<count; ++i) {
2000006e:	2500      	movs	r5, #0
20000070:	461e      	mov	r6, r3
20000072:	42a5      	cmp	r5, r4
20000074:	d005      	beq.n	20000082 <_entry+0x34>
    __init_fptr init_p = (__init_fptr)__init_array_start[i];
20000076:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
    if (init_p != NULL)
2000007a:	b103      	cbz	r3, 2000007e <_entry+0x30>
      init_p();
2000007c:	4798      	blx	r3
  for (; bss_p != bss_e;)
    *(bss_p++) = 0;

  // Call constructors if any.  
  const size_t count = __init_array_end - __init_array_start;
  for (size_t i = 0; i<count; ++i) {
2000007e:	3501      	adds	r5, #1
20000080:	e7f7      	b.n	20000072 <_entry+0x24>
    if (init_p != NULL)
      init_p();
  }
  
  // Call user initialization
  _hook_init(platform, api);
20000082:	4641      	mov	r1, r8
20000084:	4638      	mov	r0, r7
20000086:	f000 f80b 	bl	200000a0 <_hook_init>
2000008a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
2000008e:	bf00      	nop
20000090:	200003e7 	.word	0x200003e7
20000094:	200003ff 	.word	0x200003ff
20000098:	20000040 	.word	0x20000040
2000009c:	20000040 	.word	0x20000040

200000a0 <_hook_init>:
static State s_state;

//===========================================================================================
void OSC_INIT(uint32_t platform, uint32_t api)
{
  s_state.w0    = 0.f;
200000a0:	4b05      	ldr	r3, [pc, #20]	; (200000b8 <_hook_init+0x18>)
200000a2:	2200      	movs	r2, #0
200000a4:	601a      	str	r2, [r3, #0]
  s_state.w1    = 0.f;
200000a6:	605a      	str	r2, [r3, #4]
  s_state.phase0 = 0.f;
200000a8:	609a      	str	r2, [r3, #8]
  s_state.phase1 = 0.f;
200000aa:	60da      	str	r2, [r3, #12]
  s_state.type0 = 0;
200000ac:	2200      	movs	r2, #0
200000ae:	825a      	strh	r2, [r3, #18]
  s_state.type1 = 0;
200000b0:	829a      	strh	r2, [r3, #20]
  s_state.note_offset = 0;
200000b2:	821a      	strh	r2, [r3, #16]
200000b4:	4770      	bx	lr
200000b6:	bf00      	nop
200000b8:	200003e8 	.word	0x200003e8

200000bc <_Z3oscft>:
}

//===========================================================================================
float osc(float phase, uint16_t type)
{
	switch(type)
200000bc:	2804      	cmp	r0, #4
200000be:	f200 80a7 	bhi.w	20000210 <_Z3oscft+0x154>
200000c2:	e8df f000 	tbb	[pc, r0]
200000c6:	2c03      	.short	0x2c03
200000c8:	975f      	.short	0x975f
200000ca:	a6          	.byte	0xa6
200000cb:	00          	.byte	0x00
   */
  __fast_inline float osc_sinf(float x) {
    const float p = x - (uint32_t)x;
    
    // half period stored -- wrap around and invert
    const float x0f = 2.f * p * k_wt_sine_size;
200000cc:	eefc 7ac0 	vcvt.u32.f32	s15, s0
    const uint32_t x0p = (uint32_t)x0f;

    const uint32_t x0 = x0p & k_wt_sine_mask;
    const uint32_t x1 = (x0 + 1) & k_wt_sine_mask;
    
    const float y0 = linintf(x0f - x0p, wt_sine_lut_f[x0], wt_sine_lut_f[x1]);
200000d0:	4a51      	ldr	r2, [pc, #324]	; (20000218 <_Z3oscft+0x15c>)
   */
  __fast_inline float osc_sinf(float x) {
    const float p = x - (uint32_t)x;
    
    // half period stored -- wrap around and invert
    const float x0f = 2.f * p * k_wt_sine_size;
200000d2:	eef8 7a67 	vcvt.f32.u32	s15, s15
200000d6:	ee30 0a67 	vsub.f32	s0, s0, s15
200000da:	eddf 7a50 	vldr	s15, [pc, #320]	; 2000021c <_Z3oscft+0x160>
200000de:	ee60 7a27 	vmul.f32	s15, s0, s15
    const uint32_t x0p = (uint32_t)x0f;
200000e2:	eebc 7ae7 	vcvt.u32.f32	s14, s15
200000e6:	ee17 1a10 	vmov	r1, s14

    const uint32_t x0 = x0p & k_wt_sine_mask;
200000ea:	f001 037f 	and.w	r3, r1, #127	; 0x7f
    const uint32_t x1 = (x0 + 1) & k_wt_sine_mask;
    
    const float y0 = linintf(x0f - x0p, wt_sine_lut_f[x0], wt_sine_lut_f[x1]);
200000ee:	eb02 0083 	add.w	r0, r2, r3, lsl #2
200000f2:	3301      	adds	r3, #1

/** Linear interpolation
 */
static inline __attribute__((optimize("Ofast"), always_inline))
float linintf(const float fr, const float x0, const float x1) {
  return x0 + fr * (x1 - x0);
200000f4:	eeb8 7a47 	vcvt.f32.u32	s14, s14
200000f8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
200000fc:	eb02 0383 	add.w	r3, r2, r3, lsl #2
20000100:	ed90 0a00 	vldr	s0, [r0]
20000104:	ee77 7ac7 	vsub.f32	s15, s15, s14
20000108:	ed93 7a00 	vldr	s14, [r3]
2000010c:	ee37 7a40 	vsub.f32	s14, s14, s0
    return (x0p < k_wt_sine_size)?y0:-y0;
20000110:	297f      	cmp	r1, #127	; 0x7f
20000112:	eea7 0a87 	vfma.f32	s0, s15, s14
20000116:	d97e      	bls.n	20000216 <_Z3oscft+0x15a>
20000118:	eeb1 0a40 	vneg.f32	s0, s0
2000011c:	4770      	bx	lr
   * @return     Wave sample.
   */
  __fast_inline float osc_sawf(float x) {
    const float p = x - (uint32_t)x;
    
    const float x0f = 2.f * p * k_wt_saw_size;
2000011e:	eefc 7ac0 	vcvt.u32.f32	s15, s0
      x0 = k_wt_saw_size - (x0p & k_wt_saw_mask);
      x1 = x0 - 1;
      sign = -1.f;
    }
    
    const float y0 = linintf(x0f - x0p, wt_saw_lut_f[x0], wt_saw_lut_f[x1]);
20000122:	493f      	ldr	r1, [pc, #252]	; (20000220 <_Z3oscft+0x164>)
   * @return     Wave sample.
   */
  __fast_inline float osc_sawf(float x) {
    const float p = x - (uint32_t)x;
    
    const float x0f = 2.f * p * k_wt_saw_size;
20000124:	eef8 7a67 	vcvt.f32.u32	s15, s15
20000128:	ee30 0a67 	vsub.f32	s0, s0, s15
2000012c:	eddf 7a3b 	vldr	s15, [pc, #236]	; 2000021c <_Z3oscft+0x160>
20000130:	ee60 7a27 	vmul.f32	s15, s0, s15
    const uint32_t x0p = (uint32_t)x0f;
20000134:	eebc 7ae7 	vcvt.u32.f32	s14, s15
20000138:	ee17 3a10 	vmov	r3, s14
    
    uint32_t x0 = x0p, x1 = x0p+1;
    float sign = 1.f;
    if (x0p >= k_wt_saw_size) {
2000013c:	2b7f      	cmp	r3, #127	; 0x7f
      x0 = k_wt_saw_size - (x0p & k_wt_saw_mask);
2000013e:	bf87      	ittee	hi
20000140:	f003 027f 	andhi.w	r2, r3, #127	; 0x7f
20000144:	f1c2 0080 	rsbhi	r0, r2, #128	; 0x80
    const float p = x - (uint32_t)x;
    
    const float x0f = 2.f * p * k_wt_saw_size;
    const uint32_t x0p = (uint32_t)x0f;
    
    uint32_t x0 = x0p, x1 = x0p+1;
20000148:	1c5a      	addls	r2, r3, #1
2000014a:	4618      	movls	r0, r3
    float sign = 1.f;
    if (x0p >= k_wt_saw_size) {
      x0 = k_wt_saw_size - (x0p & k_wt_saw_mask);
      x1 = x0 - 1;
2000014c:	bf88      	it	hi
2000014e:	f1c2 027f 	rsbhi	r2, r2, #127	; 0x7f
      sign = -1.f;
    }
    
    const float y0 = linintf(x0f - x0p, wt_saw_lut_f[x0], wt_saw_lut_f[x1]);
    return sign*y0;
20000152:	eeb8 7a47 	vcvt.f32.u32	s14, s14
      x0 = k_wt_saw_size - (x0p & k_wt_saw_mask);
      x1 = x0 - 1;
      sign = -1.f;
    }
    
    const float y0 = linintf(x0f - x0p, wt_saw_lut_f[x0], wt_saw_lut_f[x1]);
20000156:	eb01 0080 	add.w	r0, r1, r0, lsl #2
2000015a:	eb01 0282 	add.w	r2, r1, r2, lsl #2
2000015e:	ed90 0a00 	vldr	s0, [r0]
    return sign*y0;
20000162:	ee77 7ac7 	vsub.f32	s15, s15, s14
20000166:	ed92 7a00 	vldr	s14, [r2]
2000016a:	ee37 7a40 	vsub.f32	s14, s14, s0
    
    const float x0f = 2.f * p * k_wt_saw_size;
    const uint32_t x0p = (uint32_t)x0f;
    
    uint32_t x0 = x0p, x1 = x0p+1;
    float sign = 1.f;
2000016e:	bf98      	it	ls
20000170:	eef7 6a00 	vmovls.f32	s13, #112	; 0x3f800000  1.0
      x1 = x0 - 1;
      sign = -1.f;
    }
    
    const float y0 = linintf(x0f - x0p, wt_saw_lut_f[x0], wt_saw_lut_f[x1]);
    return sign*y0;
20000174:	eea7 0a87 	vfma.f32	s0, s15, s14
    uint32_t x0 = x0p, x1 = x0p+1;
    float sign = 1.f;
    if (x0p >= k_wt_saw_size) {
      x0 = k_wt_saw_size - (x0p & k_wt_saw_mask);
      x1 = x0 - 1;
      sign = -1.f;
20000178:	bf88      	it	hi
2000017a:	eeff 6a00 	vmovhi.f32	s13, #240	; 0xbf800000 -1.0
    }
    
    const float y0 = linintf(x0f - x0p, wt_saw_lut_f[x0], wt_saw_lut_f[x1]);
    return sign*y0;
2000017e:	ee20 0a26 	vmul.f32	s0, s0, s13
	{
		case 0:
			return osc_sinf(phase);
		case 1:
			return osc_sawf(phase);
20000182:	4770      	bx	lr
   * @note Not checking input, caller responsible for bounding x.
   */
  __fast_inline float osc_parf(float x) {
    const float p = x - (uint32_t)x;

    const float x0f = 2.f * p * k_wt_par_size;
20000184:	eefc 7ac0 	vcvt.u32.f32	s15, s0
20000188:	eef8 7a67 	vcvt.f32.u32	s15, s15
2000018c:	ee30 0a67 	vsub.f32	s0, s0, s15
20000190:	eddf 7a22 	vldr	s15, [pc, #136]	; 2000021c <_Z3oscft+0x160>
20000194:	ee60 7a27 	vmul.f32	s15, s0, s15
    const uint32_t x0p = (uint32_t)x0f;
20000198:	eebc 7ae7 	vcvt.u32.f32	s14, s15
2000019c:	ee17 3a10 	vmov	r3, s14
    
    const uint32_t x0 = (x0p<=k_wt_par_size) ? x0p : (k_wt_par_size - (x0p & k_wt_par_mask));
200001a0:	2b80      	cmp	r3, #128	; 0x80
200001a2:	d904      	bls.n	200001ae <_Z3oscft+0xf2>
200001a4:	f003 027f 	and.w	r2, r3, #127	; 0x7f
200001a8:	f1c2 0280 	rsb	r2, r2, #128	; 0x80
200001ac:	e009      	b.n	200001c2 <_Z3oscft+0x106>
    const uint32_t x1 = (x0p<(k_wt_par_size-1)) ? (x0 + 1) & k_wt_par_mask : (x0p >= k_wt_par_size) ? (x0 - 1) & k_wt_par_mask : (x0 + 1);
200001ae:	2b7e      	cmp	r3, #126	; 0x7e
200001b0:	d803      	bhi.n	200001ba <_Z3oscft+0xfe>
200001b2:	1c58      	adds	r0, r3, #1
200001b4:	ee17 2a10 	vmov	r2, s14
200001b8:	e008      	b.n	200001cc <_Z3oscft+0x110>
200001ba:	2b7f      	cmp	r3, #127	; 0x7f
200001bc:	d003      	beq.n	200001c6 <_Z3oscft+0x10a>
200001be:	ee17 2a10 	vmov	r2, s14
200001c2:	1e50      	subs	r0, r2, #1
200001c4:	e002      	b.n	200001cc <_Z3oscft+0x110>
200001c6:	ee17 2a10 	vmov	r2, s14
200001ca:	2080      	movs	r0, #128	; 0x80
200001cc:	ee07 3a10 	vmov	s14, r3
    const float y0 = linintf(x0f - x0p, wt_par_lut_f[x0], wt_par_lut_f[x1]);
200001d0:	4914      	ldr	r1, [pc, #80]	; (20000224 <_Z3oscft+0x168>)
200001d2:	eeb8 7a47 	vcvt.f32.u32	s14, s14
200001d6:	eb01 0282 	add.w	r2, r1, r2, lsl #2
200001da:	eb01 0180 	add.w	r1, r1, r0, lsl #2
200001de:	ed92 0a00 	vldr	s0, [r2]
200001e2:	ee77 7ac7 	vsub.f32	s15, s15, s14
200001e6:	ed91 7a00 	vldr	s14, [r1]
200001ea:	ee37 7a40 	vsub.f32	s14, s14, s0
200001ee:	eea7 0a87 	vfma.f32	s0, s15, s14
		case 2:
			return osc_parf(phase);
200001f2:	4770      	bx	lr
		case 3:
			return (phase <= 0.5f) ? 0.8f : -0.8f; //square
200001f4:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
200001f8:	eeb4 0ae7 	vcmpe.f32	s0, s15
200001fc:	eddf 7a0a 	vldr	s15, [pc, #40]	; 20000228 <_Z3oscft+0x16c>
20000200:	ed9f 0a0a 	vldr	s0, [pc, #40]	; 2000022c <_Z3oscft+0x170>
20000204:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
20000208:	bf98      	it	ls
2000020a:	eeb0 0a67 	vmovls.f32	s0, s15
2000020e:	4770      	bx	lr
		case 4:
			return 0;
	}
}
20000210:	4770      	bx	lr
		case 2:
			return osc_parf(phase);
		case 3:
			return (phase <= 0.5f) ? 0.8f : -0.8f; //square
		case 4:
			return 0;
20000212:	ed9f 0a07 	vldr	s0, [pc, #28]	; 20000230 <_Z3oscft+0x174>
	}
}
20000216:	4770      	bx	lr
20000218:	08012bdc 	.word	0x08012bdc
2000021c:	43800000 	.word	0x43800000
20000220:	08011db8 	.word	0x08011db8
20000224:	08010170 	.word	0x08010170
20000228:	3f4ccccd 	.word	0x3f4ccccd
2000022c:	bf4ccccd 	.word	0xbf4ccccd
20000230:	00000000 	.word	0x00000000

20000234 <_Z13computePhasesffPlm>:
	for (; y != y_e; ) {
		float p0 = s_state.phase0;
		p0 = (p0 <= 0) ? 1.f - p0 : p0 - (uint32_t)p0;

		// Main signal
		const float sig0  = /*osc_softclipf(0.05f,*/ osc(p0, s_state.type0)/*)*/;
20000234:	4b2c      	ldr	r3, [pc, #176]	; (200002e8 <_Z13computePhasesffPlm+0xb4>)
		
		s_state.phase1 += w1;
		s_state.phase1 -= (uint32_t)s_state.phase1;
		
		
		*(y++) = f32_to_q31(sig0 + sig1);
20000236:	ed9f 4a2d 	vldr	s8, [pc, #180]	; 200002ec <_Z13computePhasesffPlm+0xb8>
2000023a:	edd3 5a02 	vldr	s11, [r3, #8]
2000023e:	ed93 6a03 	vldr	s12, [r3, #12]
	}
}

//===========================================================================================
float computePhases(float w0, float w1, q31_t * __restrict y,  const uint32_t frames)
{
20000242:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	for (; y != y_e; ) {
		float p0 = s_state.phase0;
		p0 = (p0 <= 0) ? 1.f - p0 : p0 - (uint32_t)p0;

		// Main signal
		const float sig0  = /*osc_softclipf(0.05f,*/ osc(p0, s_state.type0)/*)*/;
20000246:	f8b3 8012 	ldrh.w	r8, [r3, #18]
		
		float p1 = s_state.phase1;
		p1 = (p1 <= 0) ? 1.f - p1 : p1 - (uint32_t)p1;

		// Second signal
		const float sig1  = /*osc_softclipf(0.05f,*/ osc(p1, s_state.type1)/*)*/;
2000024a:	8a9e      	ldrh	r6, [r3, #20]
	}
}

//===========================================================================================
float computePhases(float w0, float w1, q31_t * __restrict y,  const uint32_t frames)
{
2000024c:	eef0 3a40 	vmov.f32	s7, s0
20000250:	4605      	mov	r5, r0
	const q31_t * y_e = y + frames;
20000252:	eb00 0781 	add.w	r7, r0, r1, lsl #2
20000256:	461c      	mov	r4, r3

	for (; y != y_e; ) {
		float p0 = s_state.phase0;
		p0 = (p0 <= 0) ? 1.f - p0 : p0 - (uint32_t)p0;
20000258:	eef7 4a00 	vmov.f32	s9, #112	; 0x3f800000  1.0
//===========================================================================================
float computePhases(float w0, float w1, q31_t * __restrict y,  const uint32_t frames)
{
	const q31_t * y_e = y + frames;

	for (; y != y_e; ) {
2000025c:	42bd      	cmp	r5, r7
2000025e:	d03d      	beq.n	200002dc <_Z13computePhasesffPlm+0xa8>
		float p0 = s_state.phase0;
		p0 = (p0 <= 0) ? 1.f - p0 : p0 - (uint32_t)p0;
20000260:	eef5 5ac0 	vcmpe.f32	s11, #0.0
20000264:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
20000268:	bf8a      	itet	hi
2000026a:	eebc 0ae5 	vcvthi.u32.f32	s0, s11
2000026e:	ee34 0ae5 	vsubls.f32	s0, s9, s11
20000272:	eeb8 0a40 	vcvthi.f32.u32	s0, s0

		// Main signal
		const float sig0  = /*osc_softclipf(0.05f,*/ osc(p0, s_state.type0)/*)*/;
20000276:	4640      	mov	r0, r8
{
	const q31_t * y_e = y + frames;

	for (; y != y_e; ) {
		float p0 = s_state.phase0;
		p0 = (p0 <= 0) ? 1.f - p0 : p0 - (uint32_t)p0;
20000278:	bf88      	it	hi
2000027a:	ee35 0ac0 	vsubhi.f32	s0, s11, s0

		// Main signal
		const float sig0  = /*osc_softclipf(0.05f,*/ osc(p0, s_state.type0)/*)*/;
2000027e:	f7ff ff1d 	bl	200000bc <_Z3oscft>
		
		s_state.phase0 += w0;
		s_state.phase0 -= (uint32_t)s_state.phase0;
		
		float p1 = s_state.phase1;
		p1 = (p1 <= 0) ? 1.f - p1 : p1 - (uint32_t)p1;
20000282:	eeb5 6ac0 	vcmpe.f32	s12, #0.0
20000286:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
		p0 = (p0 <= 0) ? 1.f - p0 : p0 - (uint32_t)p0;

		// Main signal
		const float sig0  = /*osc_softclipf(0.05f,*/ osc(p0, s_state.type0)/*)*/;
		
		s_state.phase0 += w0;
2000028a:	ee73 5aa5 	vadd.f32	s11, s7, s11
	for (; y != y_e; ) {
		float p0 = s_state.phase0;
		p0 = (p0 <= 0) ? 1.f - p0 : p0 - (uint32_t)p0;

		// Main signal
		const float sig0  = /*osc_softclipf(0.05f,*/ osc(p0, s_state.type0)/*)*/;
2000028e:	eeb0 5a40 	vmov.f32	s10, s0
		
		s_state.phase0 += w0;
		s_state.phase0 -= (uint32_t)s_state.phase0;
		
		float p1 = s_state.phase1;
		p1 = (p1 <= 0) ? 1.f - p1 : p1 - (uint32_t)p1;
20000292:	bf88      	it	hi
20000294:	eebc 0ac6 	vcvthi.u32.f32	s0, s12

		// Main signal
		const float sig0  = /*osc_softclipf(0.05f,*/ osc(p0, s_state.type0)/*)*/;
		
		s_state.phase0 += w0;
		s_state.phase0 -= (uint32_t)s_state.phase0;
20000298:	eefc 7ae5 	vcvt.u32.f32	s15, s11
		
		float p1 = s_state.phase1;
		p1 = (p1 <= 0) ? 1.f - p1 : p1 - (uint32_t)p1;
2000029c:	bf88      	it	hi
2000029e:	eeb8 0a40 	vcvthi.f32.u32	s0, s0

		// Main signal
		const float sig0  = /*osc_softclipf(0.05f,*/ osc(p0, s_state.type0)/*)*/;
		
		s_state.phase0 += w0;
		s_state.phase0 -= (uint32_t)s_state.phase0;
200002a2:	eef8 7a67 	vcvt.f32.u32	s15, s15
		
		float p1 = s_state.phase1;
		p1 = (p1 <= 0) ? 1.f - p1 : p1 - (uint32_t)p1;
200002a6:	bf94      	ite	ls
200002a8:	ee34 0ac6 	vsubls.f32	s0, s9, s12
200002ac:	ee36 0a40 	vsubhi.f32	s0, s12, s0

		// Second signal
		const float sig1  = /*osc_softclipf(0.05f,*/ osc(p1, s_state.type1)/*)*/;
200002b0:	4630      	mov	r0, r6

		// Main signal
		const float sig0  = /*osc_softclipf(0.05f,*/ osc(p0, s_state.type0)/*)*/;
		
		s_state.phase0 += w0;
		s_state.phase0 -= (uint32_t)s_state.phase0;
200002b2:	ee75 5ae7 	vsub.f32	s11, s11, s15
		
		float p1 = s_state.phase1;
		p1 = (p1 <= 0) ? 1.f - p1 : p1 - (uint32_t)p1;

		// Second signal
		const float sig1  = /*osc_softclipf(0.05f,*/ osc(p1, s_state.type1)/*)*/;
200002b6:	f7ff ff01 	bl	200000bc <_Z3oscft>
		
		s_state.phase1 += w1;
200002ba:	ee36 6a20 	vadd.f32	s12, s12, s1
		s_state.phase1 -= (uint32_t)s_state.phase1;
		
		
		*(y++) = f32_to_q31(sig0 + sig1);
200002be:	ee35 0a00 	vadd.f32	s0, s10, s0

		// Second signal
		const float sig1  = /*osc_softclipf(0.05f,*/ osc(p1, s_state.type1)/*)*/;
		
		s_state.phase1 += w1;
		s_state.phase1 -= (uint32_t)s_state.phase1;
200002c2:	eefc 7ac6 	vcvt.u32.f32	s15, s12
		
		
		*(y++) = f32_to_q31(sig0 + sig1);
200002c6:	ee20 0a04 	vmul.f32	s0, s0, s8

		// Second signal
		const float sig1  = /*osc_softclipf(0.05f,*/ osc(p1, s_state.type1)/*)*/;
		
		s_state.phase1 += w1;
		s_state.phase1 -= (uint32_t)s_state.phase1;
200002ca:	eef8 7a67 	vcvt.f32.u32	s15, s15
		
		
		*(y++) = f32_to_q31(sig0 + sig1);
200002ce:	eebd 0ac0 	vcvt.s32.f32	s0, s0

		// Second signal
		const float sig1  = /*osc_softclipf(0.05f,*/ osc(p1, s_state.type1)/*)*/;
		
		s_state.phase1 += w1;
		s_state.phase1 -= (uint32_t)s_state.phase1;
200002d2:	ee36 6a67 	vsub.f32	s12, s12, s15
		
		
		*(y++) = f32_to_q31(sig0 + sig1);
200002d6:	eca5 0a01 	vstmia	r5!, {s0}
//===========================================================================================
float computePhases(float w0, float w1, q31_t * __restrict y,  const uint32_t frames)
{
	const q31_t * y_e = y + frames;

	for (; y != y_e; ) {
200002da:	e7bf      	b.n	2000025c <_Z13computePhasesffPlm+0x28>
200002dc:	edc4 5a02 	vstr	s11, [r4, #8]
200002e0:	ed84 6a03 	vstr	s12, [r4, #12]
		
		
		*(y++) = f32_to_q31(sig0 + sig1);
  }
  
}
200002e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
200002e8:	200003e8 	.word	0x200003e8
200002ec:	4f000000 	.word	0x4f000000

200002f0 <_hook_cycle>:

//===========================================================================================
void OSC_CYCLE(const user_osc_param_t * const params,
               int32_t *yn,
               const uint32_t frames)
{  
200002f0:	b430      	push	{r4, r5}
200002f2:	460c      	mov	r4, r1
  const float w0 = s_state.w0 = osc_w0f_for_note((params->pitch)>>8, params->pitch & 0xFF);
200002f4:	8881      	ldrh	r1, [r0, #4]
   *
   * @param note Note in [0-151] range.
   * @return     Corresponding Hertz value.
   */
  __fast_inline float osc_notehzf(uint8_t note) {
    return midi_to_hz_lut_f[clipmaxu32(note,k_midi_to_hz_size-1)];
200002f6:	4d2d      	ldr	r5, [pc, #180]	; (200003ac <_hook_cycle+0xbc>)
   */
  __fast_inline float osc_w0f_for_note(uint8_t note, uint8_t mod) {    
    const float f0 = osc_notehzf(note);
    const float f1 = osc_notehzf(note+1);
    
    const float f = clipmaxf(linintf(mod * k_note_mod_fscale, f0, f1), k_note_max_hz);
200002f8:	eddf 7a2d 	vldr	s15, [pc, #180]	; 200003b0 <_hook_cycle+0xc0>

    return f * k_samplerate_recipf;
200002fc:	ed9f 6a2d 	vldr	s12, [pc, #180]	; 200003b4 <_hook_cycle+0xc4>
20000300:	1208      	asrs	r0, r1, #8
20000302:	b2c3      	uxtb	r3, r0
20000304:	b2c9      	uxtb	r1, r1
20000306:	ee07 1a10 	vmov	s14, r1
   * @param note Note in [0-151] range, mod in [0-255] range.
   * @return     Corresponding 0-1 phase increment in floating point.
   */
  __fast_inline float osc_w0f_for_note(uint8_t note, uint8_t mod) {    
    const float f0 = osc_notehzf(note);
    const float f1 = osc_notehzf(note+1);
2000030a:	1c59      	adds	r1, r3, #1

/** Clip upper bound of unsigned integer x to m (inclusive)
 */
static inline __attribute__((optimize("Ofast"), always_inline))
uint32_t clipmaxu32(const uint32_t x, const uint32_t m) {
  return (((x)>=m)?m:(x));
2000030c:	2896      	cmp	r0, #150	; 0x96
2000030e:	b2c9      	uxtb	r1, r1
   *
   * @param note Note in [0-151] range.
   * @return     Corresponding Hertz value.
   */
  __fast_inline float osc_notehzf(uint8_t note) {
    return midi_to_hz_lut_f[clipmaxu32(note,k_midi_to_hz_size-1)];
20000310:	bfc8      	it	gt
20000312:	2097      	movgt	r0, #151	; 0x97
20000314:	2996      	cmp	r1, #150	; 0x96
20000316:	bf88      	it	hi
20000318:	2197      	movhi	r1, #151	; 0x97
   */
  __fast_inline float osc_w0f_for_note(uint8_t note, uint8_t mod) {    
    const float f0 = osc_notehzf(note);
    const float f1 = osc_notehzf(note+1);
    
    const float f = clipmaxf(linintf(mod * k_note_mod_fscale, f0, f1), k_note_max_hz);
2000031a:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
   *
   * @param note Note in [0-151] range.
   * @return     Corresponding Hertz value.
   */
  __fast_inline float osc_notehzf(uint8_t note) {
    return midi_to_hz_lut_f[clipmaxu32(note,k_midi_to_hz_size-1)];
2000031e:	eb05 0080 	add.w	r0, r5, r0, lsl #2
20000322:	eb05 0181 	add.w	r1, r5, r1, lsl #2
20000326:	ed90 0a00 	vldr	s0, [r0]
2000032a:	4823      	ldr	r0, [pc, #140]	; (200003b8 <_hook_cycle+0xc8>)
   */
  __fast_inline float osc_w0f_for_note(uint8_t note, uint8_t mod) {    
    const float f0 = osc_notehzf(note);
    const float f1 = osc_notehzf(note+1);
    
    const float f = clipmaxf(linintf(mod * k_note_mod_fscale, f0, f1), k_note_max_hz);
2000032c:	ee27 7a27 	vmul.f32	s14, s14, s15
20000330:	edd1 7a00 	vldr	s15, [r1]
  const float w1 = s_state.w1 = osc_w0f_for_note(((params->pitch)>>8) + s_state.note_offset, params->pitch & 0xFF);  
20000334:	7c01      	ldrb	r1, [r0, #16]
20000336:	ee77 7ac0 	vsub.f32	s15, s15, s0
2000033a:	440b      	add	r3, r1
2000033c:	eea7 0a27 	vfma.f32	s0, s14, s15
20000340:	b2db      	uxtb	r3, r3

/** FSEL construct
 */
static inline __attribute__((optimize("Ofast"),always_inline))
float fsel(const float a, const float b, const float c) {
  return (a >= 0) ? b : c;
20000342:	eddf 7a1e 	vldr	s15, [pc, #120]	; 200003bc <_hook_cycle+0xcc>
20000346:	eeb4 0ae7 	vcmpe.f32	s0, s15
2000034a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
2000034e:	bfa8      	it	ge
20000350:	eeb0 0a67 	vmovge.f32	s0, s15
20000354:	2b96      	cmp	r3, #150	; 0x96
   *
   * @param note Note in [0-151] range.
   * @return     Corresponding Hertz value.
   */
  __fast_inline float osc_notehzf(uint8_t note) {
    return midi_to_hz_lut_f[clipmaxu32(note,k_midi_to_hz_size-1)];
20000356:	bf98      	it	ls
20000358:	4619      	movls	r1, r3
   * @param note Note in [0-151] range, mod in [0-255] range.
   * @return     Corresponding 0-1 phase increment in floating point.
   */
  __fast_inline float osc_w0f_for_note(uint8_t note, uint8_t mod) {    
    const float f0 = osc_notehzf(note);
    const float f1 = osc_notehzf(note+1);
2000035a:	f103 0301 	add.w	r3, r3, #1
2000035e:	b2db      	uxtb	r3, r3
   *
   * @param note Note in [0-151] range.
   * @return     Corresponding Hertz value.
   */
  __fast_inline float osc_notehzf(uint8_t note) {
    return midi_to_hz_lut_f[clipmaxu32(note,k_midi_to_hz_size-1)];
20000360:	bf88      	it	hi
20000362:	2197      	movhi	r1, #151	; 0x97
20000364:	2b96      	cmp	r3, #150	; 0x96
20000366:	bf88      	it	hi
20000368:	2397      	movhi	r3, #151	; 0x97
2000036a:	eb05 0181 	add.w	r1, r5, r1, lsl #2
2000036e:	eb05 0383 	add.w	r3, r5, r3, lsl #2
20000372:	edd1 0a00 	vldr	s1, [r1]

/** Linear interpolation
 */
static inline __attribute__((optimize("Ofast"), always_inline))
float linintf(const float fr, const float x0, const float x1) {
  return x0 + fr * (x1 - x0);
20000376:	edd3 6a00 	vldr	s13, [r3]
2000037a:	ee76 6ae0 	vsub.f32	s13, s13, s1
    const float f0 = osc_notehzf(note);
    const float f1 = osc_notehzf(note+1);
    
    const float f = clipmaxf(linintf(mod * k_note_mod_fscale, f0, f1), k_note_max_hz);

    return f * k_samplerate_recipf;
2000037e:	ee20 0a06 	vmul.f32	s0, s0, s12
20000382:	eee6 0a87 	vfma.f32	s1, s13, s14
  
  q31_t * __restrict y = (q31_t *)yn;
  
  computePhases(w0, w1, y, frames);
20000386:	4611      	mov	r1, r2
//===========================================================================================
void OSC_CYCLE(const user_osc_param_t * const params,
               int32_t *yn,
               const uint32_t frames)
{  
  const float w0 = s_state.w0 = osc_w0f_for_note((params->pitch)>>8, params->pitch & 0xFF);
20000388:	ed80 0a00 	vstr	s0, [r0]

/** FSEL construct
 */
static inline __attribute__((optimize("Ofast"),always_inline))
float fsel(const float a, const float b, const float c) {
  return (a >= 0) ? b : c;
2000038c:	eef4 0ae7 	vcmpe.f32	s1, s15
20000390:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
20000394:	bfb8      	it	lt
20000396:	eef0 7a60 	vmovlt.f32	s15, s1
2000039a:	ee67 0a86 	vmul.f32	s1, s15, s12
  const float w1 = s_state.w1 = osc_w0f_for_note(((params->pitch)>>8) + s_state.note_offset, params->pitch & 0xFF);  
2000039e:	edc0 0a01 	vstr	s1, [r0, #4]
  
  q31_t * __restrict y = (q31_t *)yn;
  
  computePhases(w0, w1, y, frames);
200003a2:	4620      	mov	r0, r4
}
200003a4:	bc30      	pop	{r4, r5}
  const float w0 = s_state.w0 = osc_w0f_for_note((params->pitch)>>8, params->pitch & 0xFF);
  const float w1 = s_state.w1 = osc_w0f_for_note(((params->pitch)>>8) + s_state.note_offset, params->pitch & 0xFF);  
  
  q31_t * __restrict y = (q31_t *)yn;
  
  computePhases(w0, w1, y, frames);
200003a6:	f7ff bf45 	b.w	20000234 <_Z13computePhasesffPlm>
200003aa:	bf00      	nop
200003ac:	0800f100 	.word	0x0800f100
200003b0:	3b808081 	.word	0x3b808081
200003b4:	37aec33e 	.word	0x37aec33e
200003b8:	200003e8 	.word	0x200003e8
200003bc:	46b8ff49 	.word	0x46b8ff49

200003c0 <_hook_on>:
200003c0:	4770      	bx	lr

200003c2 <_hook_off>:
{
}

//===========================================================================================
void OSC_NOTEOFF(const user_osc_param_t * const params)
{
200003c2:	4770      	bx	lr

200003c4 <_hook_param>:
//===========================================================================================
void OSC_PARAM(uint16_t index, uint16_t value)
{
  //const float valf = param_val_to_f32(value);
  
  switch (index) {
200003c4:	2801      	cmp	r0, #1
200003c6:	d006      	beq.n	200003d6 <_hook_param+0x12>
200003c8:	d302      	bcc.n	200003d0 <_hook_param+0xc>
200003ca:	2802      	cmp	r0, #2
200003cc:	d006      	beq.n	200003dc <_hook_param+0x18>
200003ce:	4770      	bx	lr
  case k_user_osc_param_id1:
	s_state.note_offset = value;
200003d0:	4b04      	ldr	r3, [pc, #16]	; (200003e4 <_hook_param+0x20>)
200003d2:	8219      	strh	r1, [r3, #16]
	break;
200003d4:	4770      	bx	lr
  case k_user_osc_param_id2:
	s_state.type0 = value;
200003d6:	4b03      	ldr	r3, [pc, #12]	; (200003e4 <_hook_param+0x20>)
200003d8:	8259      	strh	r1, [r3, #18]
	break;
200003da:	4770      	bx	lr
  case k_user_osc_param_id3:
	s_state.type1 = value;
200003dc:	4b01      	ldr	r3, [pc, #4]	; (200003e4 <_hook_param+0x20>)
200003de:	8299      	strh	r1, [r3, #20]
200003e0:	4770      	bx	lr
200003e2:	bf00      	nop
200003e4:	200003e8 	.word	0x200003e8
